1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]
temp = my_list[6]
my_list[6] = my_list[7]
my_list[7] = temp
print(my_list)

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]
temp = my_list[0]
my_list[0] = my_list[3]
my_list[3] = temp
print(my_list)

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

the code doesn't work because line 2 puts position 0 into a temporary spot while line 3 replaces position 1 with position
0 and fails to swap the values due to line 4 putting position 0 back into place. If the numbers in line 3 were switched
around and line 4 was replace with position 1 then the code would work.

4. Show how the following numbers can be sorted using the selection sort. Show the numbers after each iteration of the outer loop, similar to what is shown in the book. I am NOT looking for a copy of the code to do the sort. If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60
 0   97   74    8   98   47   62   12   11   60
 0    8   97   74   98   47   62   12   11   60
 0    8   11   97   74   98   47   62   12   60
 0    8   11   12   97   74   98   47   62   60
 0    8   11   12   47   97   74   98   62   60
 0    8   11   12   47   60   97   74   98   62
 0    8   11   12   47   60   62   97   74   98
 0    8   11   12   47   60   62   74   97   98


5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
 0   92   18   47   40   58   74   36   29   25
 0   18   92   47   40   58   74   36   29   25
 0   18   25   47   40   58   74   36   29   92
 0   18   25   29   40   58   74   36   47   92
 0   18   25   29   36   58   74   40   47   92
 0   18   25   29   36   40   47   58   74   92


6. Show how the following numbers can be sorted using the INSERTION sort. (Note: If you think the 0 gets immediately sorted into position, you are doing it wrong. Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
18   74   92   47   40   58    0   36   29   25
18   47   74   92   40   58    0   36   29   25
18   40   47   74   92   58    0   36   29   25
18   40   47   58   74   92    0   36   29   25
 0   18   36   40   47   58   74   92   29   25
 0   18   25   29   36   40   47   58   74   92

7. Show how the following numbers can be sorted using the insertion sort:

37   11   14   50   24    7   17   88   99    9
11   37   14   50   24    7   17   88   99    9
11   14   37   50   24    7   17   88   99    9
11   14   37   50   24    7   17   88   99    9
11   14   24   37   50    7   17   88   99    9
 7   11   14   24   37   50   17   88   99    9
 7   11   14   17   24   37   50   88   99    9
 7   11   14   17   24   37   50   88   99    9
 7   11   14   17   24   37   50   88   99    9
 9    7   11   14   17   24   37   50   88   99


8. Explain what `min_pos` does in the selection sort.

min_pos in the selection sort is the smaller number that gets switched into place with the current position number

9. Explain what `cur_pos` does in the selection sort.

cur_pos is the current position in which the list is at in order to switch the position of the elements when the code
has decided whether the position can be switched it will do what is needed and then move onto the next position, changing
the current position to the next number. The cod will start at current position of the list and will work hand in hand with min_pos to sort

10. Explain what `scan_pos` does in the selection sort.

scan_pos will scan the code from left to right in order to find the smaller number in the list and sort it into place. The code will loop
several times in order to sort all numbers from least to greatest within the list. if the code scans through the list
starting from left to right and finds a smaller number then the code will make the necessary adjustments

11. Explain what `key_pos` and `key_value` are in the insertion sort.

key_pos is what splits up the sorted and unsorted values. all values to the left of the key position have been sorted
from least to greats and the values to the right of key_pos have yet to be sorted into the correct positions. The key_value
is the deciding factor for a value's position on the list. if the cell location is larger than the the key_value then the value
is moved up to the right one spot and when the location is smaller then the loop stops and puts key_value to the left of the location

12. Explain `scan_pos` in the insertion sort.

unlike the selection sort, scan_pos will scan the values to the left of the key_pos in order to place the smaller values
in the correct positions. scan_pos is used to scan through the values to make sure the smaller value does not end before
a larger value as well.

13. Look at the example sort program here:

https://learn.arcade.academy/chapters/27_sorting/sorting.html#full-sorting-example

